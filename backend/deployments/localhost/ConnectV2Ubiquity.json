{
  "address": "0x4b7992F03906F7bBE3d48E5Fb724f52c56cFb039",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "durationWeeks",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bondingShareId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "getId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "setId",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "durationWeeks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "getId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "setId",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "string",
          "name": "_eventName",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_eventParam",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7410e62ef4ec0276295b1c40d6750db1090e240a95474264c419e134152db2c7",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x4b7992F03906F7bBE3d48E5Fb724f52c56cFb039",
    "transactionIndex": 0,
    "gasUsed": "815101",
    "logsBloom": "0x
    "blockHash": "0xb509c73518d8bedb169da0d72293fddddc0d9bcda5e5c9cf856af2823b21bfb8",
    "transactionHash": "0x7410e62ef4ec0276295b1c40d6750db1090e240a95474264c419e134152db2c7",
    "logs": [],
    "blockNumber": 13165308,
    "cumulativeGasUsed": "815101",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6df918a279920440a75180d91202d603",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationWeeks\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondingShareId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Deposit into Ubiquity protocol\",\"params\":{\"amount\":\"Amount of tokens to deposit (For max: `uint256(-1)`)\",\"durationWeeks\":\"Duration in weeks tokens will be locked (4-208)\",\"getId\":\"ID to retrieve amt.\",\"setId\":\"ID stores the amount of tokens deposited.\",\"token\":\"Token deposited : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"3POOL (DAI / USDC / USDT) => METAPOOL (3CRV / uAD) => uAD3CRV-f => Ubiquity BondingShareSTEP 1 : 3POOL (DAI / USDC / USDT) => 3CRVSTEP 2 : METAPOOL(3CRV / UAD) => uAD3CRV-fSTEP 3 : uAD3CRV-f => Ubiquity BondingShare\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/connector/main.sol\":\"ConnectV2Ubiquity\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/common/basic.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8624ef7adf48b5672e378d134c37a009789f2f0dc8295a0bd8f1d8b834bf48bf\"},\"contracts/common/interfaces.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5e781b66390335032166cc580928cea9303430ecc38a54db947ce1ddaf652da5\"},\"contracts/common/math.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x369f3a32eb4a85751a79ee8a55cf92cc199f5f5f4eac26afcf405553788b1be9\"},\"contracts/common/stores.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x5138ac714472c0ff415c6821f7836b450c20ddebd67bb007fb18c7bcb5f79003\"},\"contracts/connector/events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ncontract Events {\\n    event Deposit(\\n        address indexed userAddress,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 lpAmount,\\n        uint256 durationWeeks,\\n        uint256 indexed bondingShareId,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n}\\n\",\"keccak256\":\"0x2ea3844b1e6a19ddb21869b72c244fedc84a48fd5747952559e13bb01bc30b58\",\"license\":\"MIT\"},\"contracts/connector/helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {TokenInterface} from \\\"../common/interfaces.sol\\\";\\nimport {DSMath} from \\\"../common/math.sol\\\";\\nimport {Basic} from \\\"../common/basic.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n  /**\\n   * @dev Ubiquity Algorithmic Dollar Manager Address\\n   */\\n  address internal constant UbiquityAlgorithmicDollarManager = 0x4DA97a8b831C345dBe6d16FF7432DF2b7b776d98;\\n\\n  /**\\n   * @dev DAI Address\\n   */\\n  address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n  /**\\n   * @dev USDC Address\\n   */\\n  address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n  /**\\n   * @dev USDT Address\\n   */\\n  address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n  /**\\n   * @dev Curve 3CRV Token Address\\n   */\\n  address internal constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\n  /**\\n   * @dev Curve 3Pool Address\\n   */\\n  address internal constant Pool3 = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n}\\n\",\"keccak256\":\"0x2629e4fe4e46f88182fe4ab82da113b0d9a4a7625833ddbcc1de506601da3456\",\"license\":\"MIT\"},\"contracts/connector/interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport {TokenInterface} from \\\"../common/interfaces.sol\\\";\\n\\ninterface IUbiquityBondingV2 {\\n  function deposit(uint256 lpAmount, uint256 durationWeeks) external returns (uint256 bondingShareId);\\n}\\n\\ninterface IUbiquityMetaPool {\\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\n}\\n\\ninterface IUbiquity3Pool {\\n  function add_liquidity(uint256[3] calldata _amounts, uint256 _min_mint_amount) external;\\n}\\n\\ninterface IUbiquityAlgorithmicDollarManager {\\n  function dollarTokenAddress() external returns (address);\\n\\n  function stableSwapMetaPoolAddress() external returns (address);\\n\\n  function bondingContractAddress() external returns (address);\\n}\\n\",\"keccak256\":\"0x0e8f3797d729e4705054d8bf0fca88b035a9fa55715e181c80a72aa04d082d98\",\"license\":\"MIT\"},\"contracts/connector/main.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/**\\n * @title Ubiquity.\\n * @dev Ubiquity Dollar (uAD).\\n */\\n\\nimport {TokenInterface, MemoryInterface} from \\\"../common/interfaces.sol\\\";\\nimport {Stores} from \\\"../common/stores.sol\\\";\\nimport {SafeMath} from \\\"../common/math.sol\\\";\\nimport {IUbiquityBondingV2, IUbiquityMetaPool, IUbiquity3Pool, IUbiquityAlgorithmicDollarManager} from \\\"./interfaces.sol\\\";\\nimport {Helpers} from \\\"./helpers.sol\\\";\\nimport {Events} from \\\"./events.sol\\\";\\n\\ncontract ConnectV2Ubiquity is Helpers, Events {\\n  string public constant name = \\\"Ubiquity-v1\\\";\\n\\n  /**\\n   * @dev Deposit into Ubiquity protocol\\n   * @notice 3POOL (DAI / USDC / USDT) => METAPOOL (3CRV / uAD) => uAD3CRV-f => Ubiquity BondingShare\\n   * @notice STEP 1 : 3POOL (DAI / USDC / USDT) => 3CRV\\n   * @notice STEP 2 : METAPOOL(3CRV / UAD) => uAD3CRV-f\\n   * @notice STEP 3 : uAD3CRV-f => Ubiquity BondingShare\\n   * @param token Token deposited : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\\n   * @param amount Amount of tokens to deposit (For max: `uint256(-1)`)\\n   * @param durationWeeks Duration in weeks tokens will be locked (4-208)\\n   * @param getId ID to retrieve amt.\\n   * @param setId ID stores the amount of tokens deposited.\\n   */\\n  function deposit(\\n    address token,\\n    uint256 amount,\\n    uint256 durationWeeks,\\n    uint256 getId,\\n    uint256 setId\\n  ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n    address UAD = IUbiquityAlgorithmicDollarManager(UbiquityAlgorithmicDollarManager).dollarTokenAddress();\\n    address UAD3CRVf = IUbiquityAlgorithmicDollarManager(UbiquityAlgorithmicDollarManager).stableSwapMetaPoolAddress();\\n\\n    require(\\n      token == DAI || token == USDC || token == USDT || token == UAD || token == CRV3 || token == UAD3CRVf,\\n      \\\"Invalid token: must be DAI, USDC, USDT, uAD, 3CRV or uAD3CRV-f\\\"\\n    );\\n\\n    uint256 _amount = getUint(getId, amount);\\n    uint256 _lpAmount;\\n\\n    // Full balance if amount = -1\\n    if (_amount == uint256(-1)) {\\n      _amount = getTokenBal(TokenInterface(token));\\n    }\\n\\n    // STEP 1 : SwapTo3CRV : Deposit DAI, USDC or USDT into 3Pool to get 3Crv LPs\\n    if (token == DAI || token == USDC || token == USDT) {\\n      uint256[3] memory amounts1;\\n\\n      if (token == DAI) amounts1[0] = _amount;\\n      else if (token == USDC) amounts1[1] = _amount;\\n      else if (token == USDT) amounts1[2] = _amount;\\n\\n      approve(TokenInterface(token), Pool3, _amount);\\n      IUbiquity3Pool(Pool3).add_liquidity(amounts1, 0);\\n    }\\n\\n    // STEP 2 : ProvideLiquidityToMetapool : Deposit in uAD3CRV pool to get uAD3CRV-f LPs\\n    if (token == DAI || token == USDC || token == USDT || token == UAD || token == CRV3) {\\n      uint256[2] memory amounts2;\\n      address token2 = token;\\n      uint256 _amount2;\\n\\n      if (token == UAD) {\\n        _amount2 = _amount;\\n        amounts2[0] = _amount2;\\n      } else {\\n        if (token == CRV3) {\\n          _amount2 = _amount;\\n        } else {\\n          token2 = CRV3;\\n          _amount2 = getTokenBal(TokenInterface(token2));\\n        }\\n        amounts2[1] = _amount2;\\n      }\\n\\n      approve(TokenInterface(token2), UAD3CRVf, _amount2);\\n      _lpAmount = IUbiquityMetaPool(UAD3CRVf).add_liquidity(amounts2, 0);\\n    }\\n\\n    // STEP 3 : Farm/ApeIn : Deposit uAD3CRV-f LPs into UbiquityBondingV2 and get Ubiquity Bonding Shares\\n    if (token == UAD3CRVf) {\\n      _lpAmount = _amount;\\n    }\\n\\n    address Bonding = IUbiquityAlgorithmicDollarManager(UbiquityAlgorithmicDollarManager).bondingContractAddress();\\n    approve(TokenInterface(UAD3CRVf), Bonding, _lpAmount);\\n    uint256 bondingShareId = IUbiquityBondingV2(Bonding).deposit(_lpAmount, durationWeeks);\\n\\n    setUint(setId, bondingShareId);\\n\\n    _eventName = \\\"Deposit(address,address,uint256,uint256,uint256,uint256,uint256,uint256)\\\";\\n    _eventParam = abi.encode(address(this), token, amount, _lpAmount, durationWeeks, bondingShareId, getId, setId);\\n  }\\n}\\n\",\"keccak256\":\"0x0ba2ccddf6b87e879303c90de7efb12eaacfce5a21dc47b042c8603d46c2677b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610dc8806100206000396000f3fe6080604052600436106100295760003560e01c806306fdde031461002e5780636893680914610059575b600080fd5b34801561003a57600080fd5b5061004361007a565b6040516100509190610c86565b60405180910390f35b61006c610067366004610b2c565b6100a1565b604051610050929190610c99565b6040518060400160405280600b81526020016a55626971756974792d763160a81b81525081565b6060806000734da97a8b831c345dbe6d16ff7432df2b7b776d986001600160a01b031663bc3ea0186040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156100f557600080fd5b505af1158015610109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012d9190610b10565b90506000734da97a8b831c345dbe6d16ff7432df2b7b776d986001600160a01b031663d3815fb96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561018057600080fd5b505af1158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b89190610b10565b90506001600160a01b038916736b175474e89094c44da98b954eedeac495271d0f148061020157506001600160a01b03891673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48145b8061022857506001600160a01b03891673dac17f958d2ee523a2206206994597c13d831ec7145b806102445750816001600160a01b0316896001600160a01b0316145b8061026b57506001600160a01b038916736c3f90f043a72fa612cbac8115ee7e52bde6e490145b806102875750806001600160a01b0316896001600160a01b0316145b6102ac5760405162461bcd60e51b81526004016102a390610cc7565b60405180910390fd5b60006102b8878a6107ce565b905060006000198214156102d2576102cf8b61086a565b91505b6001600160a01b038b16736b175474e89094c44da98b954eedeac495271d0f148061031957506001600160a01b038b1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48145b8061034057506001600160a01b038b1673dac17f958d2ee523a2206206994597c13d831ec7145b156104695761034d610ad4565b6001600160a01b038c16736b175474e89094c44da98b954eedeac495271d0f141561038157828160005b60200201526103dc565b6001600160a01b038c1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814156103af5782816001610377565b6001600160a01b038c1673dac17f958d2ee523a2206206994597c13d831ec714156103dc57604081018390525b6103fb8c73bebc44782c7db0a1a60cb6fe97d0b483032ff1c78561090f565b604051634515cef360e01b815273bebc44782c7db0a1a60cb6fe97d0b483032ff1c790634515cef390610435908490600090600401610c4e565b600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b50505050505b6001600160a01b038b16736b175474e89094c44da98b954eedeac495271d0f14806104b057506001600160a01b038b1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48145b806104d757506001600160a01b038b1673dac17f958d2ee523a2206206994597c13d831ec7145b806104f35750836001600160a01b03168b6001600160a01b0316145b8061051a57506001600160a01b038b16736c3f90f043a72fa612cbac8115ee7e52bde6e490145b1561063157610527610af2565b8b60006001600160a01b03808316908816141561054857508382528361059f565b6001600160a01b038e16736c3f90f043a72fa612cbac8115ee7e52bde6e4901415610574575083610597565b736c3f90f043a72fa612cbac8115ee7e52bde6e49091506105948261086a565b90505b602083018190525b6105aa82878361090f565b604051630b4c7e4d60e01b81526001600160a01b03871690630b4c7e4d906105d9908690600090600401610c16565b602060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190610b6f565b93505050505b826001600160a01b03168b6001600160a01b0316141561064e5750805b6000734da97a8b831c345dbe6d16ff7432df2b7b776d986001600160a01b031663de71c1db6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190610b10565b90506106e484828461090f565b604051631c57762b60e31b81526000906001600160a01b0383169063e2bbb158906107159086908f90600401610d24565b602060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190610b6f565b90506107738982610a57565b604051806080016040528060488152602001610d4b604891399750308d8d858e858f8f6040516020016107ad989796959493929190610bd2565b60405160208183030381529060405296505050505050509550959350505050565b6000821561086157738a5419cfc711b2343c17a6abf4b2bafabb06957f6001600160a01b031663a9c70eaa846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561083057600080fd5b505af1158015610844573d6000803e3d6000fd5b505050506040513d602081101561085a57600080fd5b5051610863565b815b9392505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461090757604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108d657600080fd5b505afa1580156108ea573d6000803e3d6000fd5b505050506040513d602081101561090057600080fd5b5051610909565b475b92915050565b826001600160a01b031663095ea7b383836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561096657600080fd5b505af1925050508015610977575060015b610a52576040805163095ea7b360e01b81526001600160a01b03848116600483015260006024830181905292519086169263095ea7b3926044808201939182900301818387803b1580156109ca57600080fd5b505af11580156109de573d6000803e3d6000fd5b50505050826001600160a01b031663095ea7b383836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b505050505b505050565b8115610ad05760408051631878f25160e21b815260048101849052602481018390529051738a5419cfc711b2343c17a6abf4b2bafabb06957f916361e3c94491604480830192600092919082900301818387803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b505050505b5050565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600060208284031215610b21578081fd5b815161086381610d32565b600080600080600060a08688031215610b43578081fd5b8535610b4e81610d32565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215610b80578081fd5b5051919050565b60008151808452815b81811015610bac57602081850181015186830182015201610b90565b81811115610bbd5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b03988916815296909716602087015260408601949094526060850192909252608084015260a083015260c082015260e08101919091526101000190565b60608101818460005b6002811015610c3e578151835260209283019290910190600101610c1f565b5050508260408301529392505050565b60808101818460005b6003811015610c76578151835260209283019290910190600101610c57565b5050508260608301529392505050565b6000602082526108636020830184610b87565b600060408252610cac6040830185610b87565b8281036020840152610cbe8185610b87565b95945050505050565b6020808252603e908201527f496e76616c696420746f6b656e3a206d757374206265204441492c205553444360408201527f2c20555344542c207541442c2033435256206f7220754144334352562d660000606082015260800190565b918252602082015260400190565b6001600160a01b0381168114610d4757600080fd5b5056fe4465706f73697428616464726573732c616464726573732c75696e743235362c75696e743235362c75696e743235362c75696e743235362c75696e743235362c75696e7432353629a26469706673582212207ddc6b60273d4a75a88e227196f3eeaec84fc405b3bdda568ca1cf40289179d464736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c806306fdde031461002e5780636893680914610059575b600080fd5b34801561003a57600080fd5b5061004361007a565b6040516100509190610c86565b60405180910390f35b61006c610067366004610b2c565b6100a1565b604051610050929190610c99565b6040518060400160405280600b81526020016a55626971756974792d763160a81b81525081565b6060806000734da97a8b831c345dbe6d16ff7432df2b7b776d986001600160a01b031663bc3ea0186040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156100f557600080fd5b505af1158015610109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012d9190610b10565b90506000734da97a8b831c345dbe6d16ff7432df2b7b776d986001600160a01b031663d3815fb96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561018057600080fd5b505af1158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b89190610b10565b90506001600160a01b038916736b175474e89094c44da98b954eedeac495271d0f148061020157506001600160a01b03891673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48145b8061022857506001600160a01b03891673dac17f958d2ee523a2206206994597c13d831ec7145b806102445750816001600160a01b0316896001600160a01b0316145b8061026b57506001600160a01b038916736c3f90f043a72fa612cbac8115ee7e52bde6e490145b806102875750806001600160a01b0316896001600160a01b0316145b6102ac5760405162461bcd60e51b81526004016102a390610cc7565b60405180910390fd5b60006102b8878a6107ce565b905060006000198214156102d2576102cf8b61086a565b91505b6001600160a01b038b16736b175474e89094c44da98b954eedeac495271d0f148061031957506001600160a01b038b1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48145b8061034057506001600160a01b038b1673dac17f958d2ee523a2206206994597c13d831ec7145b156104695761034d610ad4565b6001600160a01b038c16736b175474e89094c44da98b954eedeac495271d0f141561038157828160005b60200201526103dc565b6001600160a01b038c1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814156103af5782816001610377565b6001600160a01b038c1673dac17f958d2ee523a2206206994597c13d831ec714156103dc57604081018390525b6103fb8c73bebc44782c7db0a1a60cb6fe97d0b483032ff1c78561090f565b604051634515cef360e01b815273bebc44782c7db0a1a60cb6fe97d0b483032ff1c790634515cef390610435908490600090600401610c4e565b600060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b50505050505b6001600160a01b038b16736b175474e89094c44da98b954eedeac495271d0f14806104b057506001600160a01b038b1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48145b806104d757506001600160a01b038b1673dac17f958d2ee523a2206206994597c13d831ec7145b806104f35750836001600160a01b03168b6001600160a01b0316145b8061051a57506001600160a01b038b16736c3f90f043a72fa612cbac8115ee7e52bde6e490145b1561063157610527610af2565b8b60006001600160a01b03808316908816141561054857508382528361059f565b6001600160a01b038e16736c3f90f043a72fa612cbac8115ee7e52bde6e4901415610574575083610597565b736c3f90f043a72fa612cbac8115ee7e52bde6e49091506105948261086a565b90505b602083018190525b6105aa82878361090f565b604051630b4c7e4d60e01b81526001600160a01b03871690630b4c7e4d906105d9908690600090600401610c16565b602060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190610b6f565b93505050505b826001600160a01b03168b6001600160a01b0316141561064e5750805b6000734da97a8b831c345dbe6d16ff7432df2b7b776d986001600160a01b031663de71c1db6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190610b10565b90506106e484828461090f565b604051631c57762b60e31b81526000906001600160a01b0383169063e2bbb158906107159086908f90600401610d24565b602060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190610b6f565b90506107738982610a57565b604051806080016040528060488152602001610d4b604891399750308d8d858e858f8f6040516020016107ad989796959493929190610bd2565b60405160208183030381529060405296505050505050509550959350505050565b6000821561086157738a5419cfc711b2343c17a6abf4b2bafabb06957f6001600160a01b031663a9c70eaa846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561083057600080fd5b505af1158015610844573d6000803e3d6000fd5b505050506040513d602081101561085a57600080fd5b5051610863565b815b9392505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461090757604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156108d657600080fd5b505afa1580156108ea573d6000803e3d6000fd5b505050506040513d602081101561090057600080fd5b5051610909565b475b92915050565b826001600160a01b031663095ea7b383836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561096657600080fd5b505af1925050508015610977575060015b610a52576040805163095ea7b360e01b81526001600160a01b03848116600483015260006024830181905292519086169263095ea7b3926044808201939182900301818387803b1580156109ca57600080fd5b505af11580156109de573d6000803e3d6000fd5b50505050826001600160a01b031663095ea7b383836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b505050505b505050565b8115610ad05760408051631878f25160e21b815260048101849052602481018390529051738a5419cfc711b2343c17a6abf4b2bafabb06957f916361e3c94491604480830192600092919082900301818387803b158015610ab757600080fd5b505af1158015610acb573d6000803e3d6000fd5b505050505b5050565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600060208284031215610b21578081fd5b815161086381610d32565b600080600080600060a08688031215610b43578081fd5b8535610b4e81610d32565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215610b80578081fd5b5051919050565b60008151808452815b81811015610bac57602081850181015186830182015201610b90565b81811115610bbd5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b03988916815296909716602087015260408601949094526060850192909252608084015260a083015260c082015260e08101919091526101000190565b60608101818460005b6002811015610c3e578151835260209283019290910190600101610c1f565b5050508260408301529392505050565b60808101818460005b6003811015610c76578151835260209283019290910190600101610c57565b5050508260608301529392505050565b6000602082526108636020830184610b87565b600060408252610cac6040830185610b87565b8281036020840152610cbe8185610b87565b95945050505050565b6020808252603e908201527f496e76616c696420746f6b656e3a206d757374206265204441492c205553444360408201527f2c20555344542c207541442c2033435256206f7220754144334352562d660000606082015260800190565b918252602082015260400190565b6001600160a01b0381168114610d4757600080fd5b5056fe4465706f73697428616464726573732c616464726573732c75696e743235362c75696e743235362c75696e743235362c75696e743235362c75696e743235362c75696e7432353629a26469706673582212207ddc6b60273d4a75a88e227196f3eeaec84fc405b3bdda568ca1cf40289179d464736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256,uint256,uint256,uint256)": {
        "details": "Deposit into Ubiquity protocol",
        "params": {
          "amount": "Amount of tokens to deposit (For max: `uint256(-1)`)",
          "durationWeeks": "Duration in weeks tokens will be locked (4-208)",
          "getId": "ID to retrieve amt.",
          "setId": "ID stores the amount of tokens deposited.",
          "token": "Token deposited : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,uint256,uint256,uint256,uint256)": {
        "notice": "3POOL (DAI / USDC / USDT) => METAPOOL (3CRV / uAD) => uAD3CRV-f => Ubiquity BondingShareSTEP 1 : 3POOL (DAI / USDC / USDT) => 3CRVSTEP 2 : METAPOOL(3CRV / UAD) => uAD3CRV-fSTEP 3 : uAD3CRV-f => Ubiquity BondingShare"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}