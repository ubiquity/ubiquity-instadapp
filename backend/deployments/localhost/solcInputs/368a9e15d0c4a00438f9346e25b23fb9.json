{
  "language": "Solidity",
  "sources": {
    "contracts/common/basic.sol": {
      "content": "pragma solidity ^0.7.0;\n\nimport { TokenInterface } from \"./interfaces.sol\";\nimport { Stores } from \"./stores.sol\";\nimport { DSMath } from \"./math.sol\";\n\nabstract contract Basic is DSMath, Stores {\n\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = (_amt / 10 ** (18 - _dec));\n    }\n\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = mul(_amt, 10 ** (18 - _dec));\n    }\n\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\n    }\n\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\n    }\n\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\n        return abi.encode(eventName, eventParam);\n    }\n\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\n        try token.approve(spender, amount) {\n\n        } catch {\n            token.approve(spender, 0);\n            token.approve(spender, amount);\n        }\n    }\n\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\n    }\n\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\n        if(isEth) token.deposit{value: amount}();\n    }\n\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\n       if(isEth) {\n            approve(token, address(token), amount);\n            token.withdraw(amount);\n        }\n    }\n}\n"
    },
    "contracts/common/interfaces.sol": {
      "content": "pragma solidity ^0.7.0;\n\ninterface TokenInterface {\n    function approve(address, uint256) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n}\n\ninterface MemoryInterface {\n    function getUint(uint id) external returns (uint num);\n    function setUint(uint id, uint val) external;\n}\n\ninterface InstaMapping {\n    function cTokenMapping(address) external view returns (address);\n    function gemJoinMapping(bytes32) external view returns (address);\n}\n\ninterface AccountInterface {\n    function enable(address) external;\n    function disable(address) external;\n    function isAuth(address) external view returns (bool);\n}\n"
    },
    "contracts/common/stores.sol": {
      "content": "pragma solidity ^0.7.0;\n\nimport { MemoryInterface, InstaMapping } from \"./interfaces.sol\";\n\n\nabstract contract Stores {\n\n  /**\n   * @dev Return ethereum address\n   */\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /**\n   * @dev Return Wrapped ETH address\n   */\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n  /**\n   * @dev Return memory variable address\n   */\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\n\n  /**\n   * @dev Return InstaDApp Mapping Addresses\n   */\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\n\n  /**\n   * @dev Get Uint value from InstaMemory Contract.\n   */\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\n  }\n\n  /**\n  * @dev Set Uint value in InstaMemory Contract.\n  */\n  function setUint(uint setId, uint val) virtual internal {\n    if (setId != 0) instaMemory.setUint(setId, val);\n  }\n\n}\n"
    },
    "contracts/common/math.sol": {
      "content": "pragma solidity ^0.7.0;\n\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract DSMath {\n  uint constant WAD = 10 ** 18;\n  uint constant RAY = 10 ** 27;\n\n  function add(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(x, y);\n  }\n\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\n    z = SafeMath.sub(x, y);\n  }\n\n  function mul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.mul(x, y);\n  }\n\n  function div(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.div(x, y);\n  }\n\n  function wmul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n  }\n\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n  }\n\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n  }\n\n  function rmul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n  }\n\n  function toInt(uint x) internal pure returns (int y) {\n    y = int(x);\n    require(y >= 0, \"int-overflow\");\n  }\n\n  function toRad(uint wad) internal pure returns (uint rad) {\n    rad = mul(wad, 10 ** 27);\n  }\n\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/connectors/ubiquity/helpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport { Basic } from \"../../common/basic.sol\";\nimport { IUbiquityAlgorithmicDollarManager } from \"./interfaces.sol\";\n\nabstract contract Helpers is Basic {\n\t/**\n\t * @dev Ubiquity Algorithmic Dollar Manager\n\t */\n\tIUbiquityAlgorithmicDollarManager internal constant ubiquityManager =\n\t\tIUbiquityAlgorithmicDollarManager(\n\t\t\t0x4DA97a8b831C345dBe6d16FF7432DF2b7b776d98\n\t\t);\n\n\t/**\n\t * @dev DAI Address\n\t */\n\taddress internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n\t/**\n\t * @dev USDC Address\n\t */\n\taddress internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\n\t/**\n\t * @dev USDT Address\n\t */\n\taddress internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n\t/**\n\t * @dev Curve 3CRV Token Address\n\t */\n\taddress internal constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n\n\t/**\n\t * @dev Curve 3Pool Address\n\t */\n\taddress internal constant Pool3 =\n\t\t0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n\n\t/**\n\t * @dev Ubiquity Algorithmic Dollar Address\n\t */\n\tfunction getUAD() internal returns (address) {\n\t\treturn ubiquityManager.dollarTokenAddress();\n\t}\n\n\t/**\n\t * @dev Ubiquity Metapool uAD / 3CRV Address\n\t */\n\tfunction getUADCRV3() internal returns (address) {\n\t\treturn ubiquityManager.stableSwapMetaPoolAddress();\n\t}\n}\n"
    },
    "contracts/connectors/ubiquity/interfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IUbiquityBondingV2 {\n\tstruct Bond {\n\t\taddress minter;\n\t\tuint256 lpFirstDeposited;\n\t\tuint256 creationBlock;\n\t\tuint256 lpRewardDebt;\n\t\tuint256 endBlock;\n\t\tuint256 lpAmount;\n\t}\n\n\tfunction deposit(uint256 lpAmount, uint256 durationWeeks)\n\t\texternal\n\t\treturns (uint256 bondingShareId);\n\n\tfunction removeLiquidity(uint256 lpAmount, uint256 bondId) external;\n\n\tfunction holderTokens(address) external view returns (uint256[] memory);\n\n\tfunction totalLP() external view returns (uint256);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction getBond(uint256 bondId) external returns (Bond memory bond);\n}\n\ninterface IUbiquityMetaPool {\n\tfunction add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount)\n\t\texternal\n\t\treturns (uint256);\n\n\tfunction remove_liquidity_one_coin(\n\t\tuint256 lpAmount,\n\t\tint128 i,\n\t\tuint256 min_amount\n\t) external returns (uint256);\n}\n\ninterface I3Pool {\n\tfunction add_liquidity(\n\t\tuint256[3] calldata _amounts,\n\t\tuint256 _min_mint_amount\n\t) external;\n\n\tfunction remove_liquidity_one_coin(\n\t\tuint256 lpAmount,\n\t\tint128 i,\n\t\tuint256 min_amount\n\t) external;\n}\n\ninterface IUbiquityAlgorithmicDollarManager {\n\tfunction dollarTokenAddress() external returns (address);\n\n\tfunction stableSwapMetaPoolAddress() external returns (address);\n\n\tfunction bondingContractAddress() external returns (address);\n\n\tfunction bondingShareAddress() external returns (address);\n}\n"
    },
    "contracts/connectors/ubiquity/main.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma abicoder v2;\n\n/**\n * @title Ubiquity.\n * @dev Ubiquity Dollar (uAD).\n */\n\nimport { TokenInterface } from \"../../common/interfaces.sol\";\nimport { IUbiquityBondingV2, IUbiquityMetaPool, I3Pool } from \"./interfaces.sol\";\nimport { Helpers } from \"./helpers.sol\";\nimport { Events } from \"./events.sol\";\n\nabstract contract UbiquityResolver is Helpers, Events {\n\t/**\n\t * @dev Deposit into Ubiquity protocol\n\t * @notice 3POOL (DAI / USDC / USDT) => METAPOOL (3CRV / uAD) => uAD3CRV-f => Ubiquity BondingShare\n\t * @notice STEP 1 : 3POOL (DAI / USDC / USDT) => 3CRV\n\t * @notice STEP 2 : METAPOOL(3CRV / UAD) => uAD3CRV-f\n\t * @notice STEP 3 : uAD3CRV-f => Ubiquity BondingShare\n\t * @param token Token deposited : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\n\t * @param amount Amount of tokens to deposit (For max: `uint256(-1)`)\n\t * @param durationWeeks Duration in weeks tokens will be locked (4-208)\n\t * @param getId ID to retrieve amt.\n\t * @param setId ID stores the bonding share id of tokens deposited.\n\t */\n\tfunction deposit(\n\t\taddress token,\n\t\tuint256 amount,\n\t\tuint256 durationWeeks,\n\t\tuint256 getId,\n\t\tuint256 setId\n\t)\n\t\texternal\n\t\tpayable\n\t\treturns (string memory _eventName, bytes memory _eventParam)\n\t{\n\t\taddress UAD3CRVf = getUADCRV3();\n\t\tbool[6] memory tok = [\n\t\t\ttoken == DAI, // 0\n\t\t\ttoken == USDC, // 1\n\t\t\ttoken == USDT, // 2\n\t\t\ttoken == CRV3, // 3\n\t\t\ttoken == getUAD(), // 4\n\t\t\ttoken == UAD3CRVf // 5\n\t\t];\n\n\t\trequire(\n\t\t\t// DAI / USDC / USDT / CRV3 / UAD / UAD3CRVF\n\t\t\ttok[0] || tok[1] || tok[2] || tok[3] || tok[4] || tok[5],\n\t\t\t\"Invalid token: must be DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\"\n\t\t);\n\n\t\tuint256 _amount = getUint(getId, amount);\n\t\tuint256 lpAmount;\n\n\t\t// Full balance if amount = -1\n\t\tif (_amount == uint256(-1)) {\n\t\t\t_amount = getTokenBal(TokenInterface(token));\n\t\t}\n\n\t\t// STEP 1 : SwapTo3CRV : Deposit DAI, USDC or USDT into 3Pool to get 3Crv LPs\n\t\t// DAI / USDC / USDT\n\t\tif (tok[0] || tok[1] || tok[2]) {\n\t\t\tuint256[3] memory amounts1;\n\n\t\t\tif (tok[0]) amounts1[0] = _amount;\n\t\t\telse if (tok[1]) amounts1[1] = _amount;\n\t\t\telse if (tok[2]) amounts1[2] = _amount;\n\n\t\t\tapprove(TokenInterface(token), Pool3, _amount);\n\t\t\tI3Pool(Pool3).add_liquidity(amounts1, 0);\n\t\t}\n\n\t\t// STEP 2 : ProvideLiquidityToMetapool : Deposit in uAD3CRV pool to get uAD3CRV-f LPs\n\t\t// DAI / USDC / USDT / CRV3 / UAD\n\t\tif (tok[0] || tok[1] || tok[2] || tok[3] || tok[4]) {\n\t\t\tuint256[2] memory amounts2;\n\t\t\taddress token2 = token;\n\t\t\tuint256 _amount2;\n\n\t\t\tif (tok[4]) {\n\t\t\t\t_amount2 = _amount;\n\t\t\t\tamounts2[0] = _amount2;\n\t\t\t} else {\n\t\t\t\tif (tok[3]) {\n\t\t\t\t\t_amount2 = _amount;\n\t\t\t\t} else {\n\t\t\t\t\ttoken2 = CRV3;\n\t\t\t\t\t_amount2 = getTokenBal(TokenInterface(token2));\n\t\t\t\t}\n\t\t\t\tamounts2[1] = _amount2;\n\t\t\t}\n\n\t\t\tapprove(TokenInterface(token2), UAD3CRVf, _amount2);\n\t\t\tlpAmount = IUbiquityMetaPool(UAD3CRVf).add_liquidity(amounts2, 0);\n\t\t}\n\n\t\t// STEP 3 : Farm/ApeIn : Deposit uAD3CRV-f LPs into UbiquityBondingV2 and get Ubiquity Bonding Shares\n\t\t// UAD3CRVF\n\t\tif (tok[5]) {\n\t\t\tlpAmount = _amount;\n\t\t}\n\n\t\taddress bonding = ubiquityManager.bondingContractAddress();\n\t\tapprove(TokenInterface(UAD3CRVf), bonding, lpAmount);\n\t\tuint256 bondingShareId = IUbiquityBondingV2(bonding).deposit(\n\t\t\tlpAmount,\n\t\t\tdurationWeeks\n\t\t);\n\n\t\tsetUint(setId, bondingShareId);\n\n\t\t_eventName = \"LogDeposit(address,address,uint256,uint256,uint256,uint256,uint256,uint256)\";\n\t\t_eventParam = abi.encode(\n\t\t\taddress(this),\n\t\t\ttoken,\n\t\t\tamount,\n\t\t\tbondingShareId,\n\t\t\tlpAmount,\n\t\t\tdurationWeeks,\n\t\t\tgetId,\n\t\t\tsetId\n\t\t);\n\t}\n\n\t/**\n\t * @dev Withdraw from Ubiquity protocol\n\t * @notice Ubiquity BondingShare => uAD3CRV-f => METAPOOL (3CRV / uAD) => 3POOL (DAI / USDC / USDT)\n\t * @notice STEP 1 : Ubiquity BondingShare  => uAD3CRV-f\n\t * @notice STEP 2 : uAD3CRV-f => METAPOOL(3CRV / UAD)\n\t * @notice STEP 3 : 3CRV => 3POOL (DAI / USDC / USDT)\n\t * @param bondingShareId Bonding Share Id to withdraw\n\t * @param token Token to withdraw to : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\n\t * @param getId ID\n\t * @param setId ID\n\t */\n\tfunction withdraw(\n\t\tuint256 bondingShareId,\n\t\taddress token,\n\t\tuint256 getId,\n\t\tuint256 setId\n\t)\n\t\texternal\n\t\tpayable\n\t\treturns (string memory _eventName, bytes memory _eventParam)\n\t{\n\t\taddress UAD3CRVf = getUADCRV3();\n\t\tbool[6] memory tok = [\n\t\t\ttoken == DAI, // 0\n\t\t\ttoken == USDC, // 1\n\t\t\ttoken == USDT, // 2\n\t\t\ttoken == CRV3, // 3\n\t\t\ttoken == getUAD(), // 4\n\t\t\ttoken == UAD3CRVf // 5\n\t\t];\n\n\t\trequire(\n\t\t\t// DAI / USDC / USDT / CRV3 / UAD / UAD3CRVF\n\t\t\ttok[0] || tok[1] || tok[2] || tok[3] || tok[4] || tok[5],\n\t\t\t\"Invalid token: must be DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\"\n\t\t);\n\n\t\tuint256 _bondingShareId = getUint(getId, bondingShareId);\n\n\t\t// Get Bond\n\t\tIUbiquityBondingV2.Bond memory bond = IUbiquityBondingV2(\n\t\t\tubiquityManager.bondingShareAddress()\n\t\t).getBond(_bondingShareId);\n\n\t\trequire(address(this) == bond.minter, \"Not bond owner\");\n\n\t\t// STEP 1 : Withdraw Ubiquity Bonding Shares to get back uAD3CRV-f LPs\n\t\taddress bonding = ubiquityManager.bondingContractAddress();\n\t\tIUbiquityBondingV2(bonding).removeLiquidity(\n\t\t\tbond.lpAmount,\n\t\t\t_bondingShareId\n\t\t);\n\n\t\t// STEP 2 : Withdraw uAD3CRV-f LPs to get back uAD or 3Crv\n\t\t// DAI / USDC / USDT / CRV3 / UAD\n\t\tif (tok[0] || tok[1] || tok[2] || tok[3] || tok[4]) {\n\t\t\tuint256 amount2 = getTokenBal(TokenInterface(UAD3CRVf));\n\t\t\tIUbiquityMetaPool(UAD3CRVf).remove_liquidity_one_coin(\n\t\t\t\tamount2,\n\t\t\t\ttok[4] ? 0 : 1,\n\t\t\t\t0\n\t\t\t);\n\t\t}\n\n\t\t// STEP 3 : Withdraw  3Crv LPs from 3Pool to get back DAI, USDC or USDT\n\t\t// DAI / USDC / USDT\n\t\tif (tok[0] || tok[1] || tok[2]) {\n\t\t\tuint256 amount1 = getTokenBal(TokenInterface(CRV3));\n\t\t\tI3Pool(Pool3).remove_liquidity_one_coin(\n\t\t\t\tamount1,\n\t\t\t\ttok[0] ? 0 : (tok[1] ? 1 : 2),\n\t\t\t\t0\n\t\t\t);\n\t\t}\n\n\t\tuint256 amount = getTokenBal(TokenInterface(token));\n\n\t\tsetUint(setId, amount);\n\t\t_eventName = \"LogWithdraw(address,uint256,uint256,uint256,address,uint256,uint256,uint256)\";\n\t\t_eventParam = abi.encode(\n\t\t\taddress(this),\n\t\t\t_bondingShareId,\n\t\t\tbond.lpAmount,\n\t\t\tbond.endBlock,\n\t\t\ttoken,\n\t\t\tamount,\n\t\t\tgetId,\n\t\t\tsetId\n\t\t);\n\t}\n}\n\ncontract ConnectV2Ubiquity is UbiquityResolver {\n\tstring public constant name = \"Ubiquity-v1\";\n}\n"
    },
    "contracts/connectors/ubiquity/events.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\ncontract Events {\n\tevent LogDeposit(\n\t\taddress indexed userAddress,\n\t\taddress indexed token,\n\t\tuint256 amount,\n\t\tuint256 indexed bondingShareId,\n\t\tuint256 lpAmount,\n\t\tuint256 durationWeeks,\n\t\tuint256 getId,\n\t\tuint256 setId\n\t);\n\tevent LogWithdraw(\n\t\taddress indexed userAddress,\n\t\tuint256 indexed bondingShareId,\n\t\tuint256 lpAmount,\n\t\tuint256 endBlock,\n\t\taddress indexed token,\n\t\tuint256 amount,\n\t\tuint256 getId,\n\t\tuint256 setId\n\t);\n}\n"
    },
    "contracts/resolver/helpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"./interfaces.sol\";\n\ncontract Helpers {\n    address internal constant dsaConnectorAddress = 0x164B772671A7c2b16FC965Ce74583D361075b3B5;\n\n    IUbiquityAlgorithmicDollarManager internal constant ubiquityManager =\n        IUbiquityAlgorithmicDollarManager(0x4DA97a8b831C345dBe6d16FF7432DF2b7b776d98);\n\n    struct UbiquityAddresses {\n        address ubiquityManagerAddress;\n        address masterChefAddress;\n        address twapOracleAddress;\n        address uadAddress;\n        address uarAddress;\n        address udebtAddress;\n        address ubqAddress;\n        address cr3Address;\n        address uadcrv3Address;\n        address bondingShareAddress;\n        address dsaResolverAddress;\n        address dsaConnectorAddress;\n    }\n\n    struct UbiquityDatas {\n        uint256 twapPrice;\n        uint256 uadTotalSupply;\n        uint256 uarTotalSupply;\n        uint256 udebtTotalSupply;\n        uint256 ubqTotalSupply;\n        uint256 uadcrv3TotalSupply;\n        uint256 bondingSharesTotalSupply;\n        uint256 lpTotalSupply;\n    }\n\n    struct UbiquityInventory {\n        uint256 uadBalance;\n        uint256 uarBalance;\n        uint256 udebtBalance;\n        uint256 ubqBalance;\n        uint256 crv3Balance;\n        uint256 uad3crvBalance;\n        uint256 ubqRewards;\n        uint256 bondingSharesBalance;\n        uint256 lpBalance;\n        uint256 bondBalance;\n        uint256 ubqPendingBalance;\n    }\n\n    function getMasterChef() internal view returns (IMasterChefV2) {\n        return IMasterChefV2(ubiquityManager.masterChefAddress());\n    }\n\n    function getTWAPOracle() internal view returns (ITWAPOracle) {\n        return ITWAPOracle(ubiquityManager.twapOracleAddress());\n    }\n\n    function getUAD() internal view returns (IERC20) {\n        return IERC20(ubiquityManager.dollarTokenAddress());\n    }\n\n    function getUAR() internal view returns (IERC20) {\n        return IERC20(ubiquityManager.autoRedeemTokenAddress());\n    }\n\n    function getUBQ() internal view returns (IERC20) {\n        return IERC20(ubiquityManager.governanceTokenAddress());\n    }\n\n    function getCRV3() internal view returns (IERC20) {\n        return IERC20(ubiquityManager.curve3PoolTokenAddress());\n    }\n\n    function getUADCRV3() internal view returns (IERC20) {\n        return IERC20(ubiquityManager.stableSwapMetaPoolAddress());\n    }\n\n    function getUDEBT() internal view returns (IERC1155) {\n        return IERC1155(ubiquityManager.debtCouponAddress());\n    }\n\n    function getBondingShare() internal view returns (IUbiquityBondingV2) {\n        return IUbiquityBondingV2(ubiquityManager.bondingShareAddress());\n    }\n\n    function getBondingShareIds(address user) internal view returns (uint256[] memory bondIds) {\n        return getBondingShare().holderTokens(user);\n    }\n\n    function getBondingShareBalanceOf(address user) internal view returns (uint256 balance) {\n        uint256[] memory bondIds = getBondingShareIds(user);\n        for (uint256 i = 0; i < bondIds.length; i += 1) {\n            balance += getBondingShare().getBond(bondIds[i]).lpAmount;\n        }\n    }\n\n    function getPendingUBQ(address user) internal view returns (uint256 amount) {\n        uint256[] memory bondIds = getBondingShareIds(user);\n        for (uint256 i = 0; i < bondIds.length; i += 1) {\n            amount += getMasterChef().pendingUGOV(bondIds[i]);\n        }\n    }\n}\n"
    },
    "contracts/resolver/interfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ninterface ITWAPOracle {\n    function update() external;\n\n    function token0() external view returns (address);\n\n    function consult(address token) external view returns (uint256 amountOut);\n}\n\ninterface IUbiquityAlgorithmicDollarManager {\n    function twapOracleAddress() external view returns (address);\n\n    function dollarTokenAddress() external view returns (address);\n\n    function autoRedeemTokenAddress() external view returns (address);\n\n    function governanceTokenAddress() external view returns (address);\n\n    function curve3PoolTokenAddress() external view returns (address);\n\n    function stableSwapMetaPoolAddress() external view returns (address);\n\n    function debtCouponAddress() external view returns (address);\n\n    function bondingShareAddress() external view returns (address);\n\n    function masterChefAddress() external view returns (address);\n}\n\ninterface IUbiquityBondingV2 {\n    struct Bond {\n        address minter;\n        uint256 lpFirstDeposited;\n        uint256 creationBlock;\n        uint256 lpRewardDebt;\n        uint256 endBlock;\n        uint256 lpAmount;\n    }\n\n    function holderTokens(address) external view returns (uint256[] memory);\n\n    function totalLP() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function getBond(uint256 id) external view returns (Bond memory);\n}\n\ninterface IMasterChefV2 {\n    function lastPrice() external view returns (uint256);\n\n    function pendingUGOV(uint256) external view returns (uint256);\n\n    function minPriceDiffToUpdateMultiplier() external view returns (uint256);\n\n    function pool() external view returns (uint256 lastRewardBlock, uint256 accuGOVPerShare);\n\n    function totalShares() external view returns (uint256);\n\n    function uGOVDivider() external view returns (uint256);\n\n    function uGOVPerBlock() external view returns (uint256);\n\n    function uGOVmultiplier() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/resolver/main.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"./interfaces.sol\";\nimport \"./helpers.sol\";\n\ncontract Resolver is Helpers {\n    function ayt() public pure returns (bool) {\n        return true;\n    }\n\n    function getUbiquityAddresses() public view returns (UbiquityAddresses memory addresses) {\n        addresses.ubiquityManagerAddress = address(ubiquityManager);\n        addresses.masterChefAddress = address(getMasterChef());\n        addresses.twapOracleAddress = address(getTWAPOracle());\n        addresses.uadAddress = address(getUAD());\n        addresses.uarAddress = address(getUAR());\n        addresses.udebtAddress = address(getUDEBT());\n        addresses.ubqAddress = address(getUBQ());\n        addresses.cr3Address = address(getCRV3());\n        addresses.uadcrv3Address = address(getUADCRV3());\n        addresses.bondingShareAddress = address(getBondingShare());\n        addresses.dsaResolverAddress = address(this);\n        addresses.dsaConnectorAddress = address(dsaConnectorAddress);\n    }\n\n    function getUbiquityDatas() public view returns (UbiquityDatas memory datas) {\n        datas.twapPrice = getTWAPOracle().consult(getTWAPOracle().token0());\n        datas.uadTotalSupply = getUAD().totalSupply();\n        datas.uarTotalSupply = getUAR().totalSupply();\n        datas.ubqTotalSupply = getUBQ().totalSupply();\n        datas.uadcrv3TotalSupply = getUADCRV3().totalSupply();\n        datas.bondingSharesTotalSupply = getBondingShare().totalSupply();\n        datas.lpTotalSupply = getBondingShare().totalLP();\n    }\n\n    function getUbiquityInventory(address user) public view returns (UbiquityInventory memory inventory) {\n        inventory.uadBalance = getUAD().balanceOf(user);\n        inventory.uarBalance = getUAR().balanceOf(user);\n        inventory.ubqBalance = getUBQ().balanceOf(user);\n        inventory.crv3Balance = getCRV3().balanceOf(user);\n        inventory.uad3crvBalance = getUADCRV3().balanceOf(user);\n        inventory.bondingSharesBalance = getBondingShareBalanceOf(user);\n        inventory.lpBalance = getBondingShareBalanceOf(user);\n        inventory.bondBalance = getBondingShareIds(user).length;\n        inventory.ubqPendingBalance = getPendingUBQ(user);\n    }\n}\n\ncontract InstaUbiquityResolver is Resolver {\n    string public constant name = \"Ubiquity-Resolver-v0.1\";\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}